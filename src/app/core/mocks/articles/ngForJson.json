{
  "image": "https://www.elite-corner.com/wp-content/uploads/2018/11/angular-ngFor-directive-min.jpg",
  "header": "ngFor - циклический вывод части шаблона Angular",
  "subheader": "детальное описание с примерами",
  "content": [
    {
      "p": "Директива ngFor одна из самых часто используемых возможностей фреймворка Angular. Она наиболее понятна всем, кто хоть как-то связан с программированием, однако даже опытные программисты иногда упускают некоторые ее особенности или возможности. И так... Приступим."
    },
    {
      "h2": "Базовый пример использования директивы ngFor"
    },
    {
      "p": "Как видно из названия, директива ngFor представляет собой цикл, который позволяет размножить html элемент и все его дочерние элементы на основе данных массива или объекта. Другими словами, на каждый элемент массива или свойство объекта будет создан html элемент."
    },
    {
      "p": "Давайте представим, что нам нужно вывести меню, данные о котором хранятся в массиве:"
    },
    {
      "code": "const menu = [\n\u0020\u0020{ title: 'home', url: '/' },\n\u0020\u0020{ title: 'blog', url: '/blog' },\n\u0020\u0020{ title: 'goods', url: '/products' },\n\u0020\u0020{ title: 'contacts', url: '/contacts' },\n\u0020\u0020{ title: 'sign in', url: '\u0020\u0020ign-in' }\n];",
      "lang": "typescript"
    },
    {
      "p": "В результате мы хотим получить такую html разметку:"
    },
    {
      "ode": "<ul>\n\u0020\u0020<li><a href='/'>home</a></li>\n\u0020\u0020<li><a href='/blog'>blog</a></li>\n\u0020\u0020<li><a href='/products'>goods</a></li>\n\u0020\u0020<li><a href='/contacts'>contacts</a></li>\n\u0020\u0020<li><a href='/sign-in'>sign In</a></li>\n</ul>",
      "lang": "html"
    },
    {
      "p": "Используя фреймворк Angular и директиву ngFor, вывод такого меню выглядит довольно просто:"
    },
    {
      "code": "<ul>\n\u0020\u0020<li *ngFor='let item of menu'>\n\u0020\u0020\u0020\u0020<a href='{{ item.url }}'>{{ item.title }}</a>\n\u0020\u0020</li>\n</ul>",
      "lang": "html"
    },
    {
      "p": "Довольно просто, не правда ли? Конечно, представить всю мощь директивы ngFor на примере 5-ти элементов сложно. Тем более, что данный функционал легко реализовать и с помощью обычного javascript языка."
    },
    {
      "p": "Но, давайте представим, что данные заранее неизвестны и приходят из HTTP запроса, их количество может достигать сотен, а то и тысяч объектов, при этом вам нужно строго следить за отрисовкой каждого элемента, чтобы не упала производительность - тут ngFor, да и фреймворк Angular в целом, становятся незаменимыми."
    },
    {
      "h2": "Использование ngFor с объектом или Map коллекцией"
    },
    {
      "p": "С увеличением количества данных, программисты стараются сократить количество операций, которые связаны с перебором массива. Для этого они создают ассоциативные массивы или по-просту - объекты. Для чего так делается - тема для другой статьи, однако давайте посмотрим на наш пример с меню, в котором данные будут храниться в объекте."
    },
    {
      "code": "const menu = {\n\u0020\u0020'home': '/',\n\u0020\u0020'blog': '/blog',\n\u0020\u0020'goods': '/products',\n\u0020\u0020'contacts: '/contacts',\n\u0020\u0020'sign in': '/sign-in'\n};",
      "lang": "javascript"
    },
    {
      "p": "Начиная с версии Angular 6.1 директива ngFor может использовать объекты и коллекции Map в качестве источника данных. Для этого необходимо использовать keyvalue pipe."
    },
    {
      "p": "До версии 6.1, при использовании директивы ngFor с объектом, компилятор выдаст ошибку. Ранее приходилось конвертировать объект в массив, а только потом использовать его известным нам способом."
    },
    {
      "p": "Пайп keyvalue под капотом делает тоже самое, однако данная возможность Angular освобождает нас от лишних манипуляций с объектами в компоненте и создания дополнительных свойств класса компонента."
    },
    {
      "p": "Для получения такой же разметки меню нам, необходимо немного модифицировать синтаксис html шаблона."
    },
    {
      "code": "<ul>\n\u0020\u0020<li *ngFor='let item of menu | keyvalue'>\n\u0020\u0020\u0020\u0020<a href='{{ item.value }}'>{{ item.key }}</a>\n\u0020\u0020</li>\n</ul>",
      "lang": "html"
    },
    {
      "p": "Преимущества: Мы используем объект или Map, что делает работу с большими объемами данных внутри компонента более удобной и производительной."
    },
    {
      "p": "Недостатки: Мы не контролируем порядок отображения элементов, так как компилятор выводит значения после сортировки ключей. Это приводит к неожиданным результатам, а также дополнительным усилиям для вывода элементов в нужном порядке."
    },
    {
      "type": "",
      "text": "",
      "lang": ""
    },
    {
      "type": "",
      "text": "",
      "lang": ""
    },
    {
      "type": "",
      "text": "",
      "lang": ""
    },
    {
      "type": "",
      "text": "",
      "lang": ""
    },
    {
      "type": "",
      "text": "",
      "lang": ""
    },
    {
      "type": "",
      "text": "",
      "lang": ""
    },
    {
      "type": "",
      "text": "",
      "lang": ""
    },
    {
      "type": "",
      "text": "",
      "lang": ""
    },
    {
      "type": "",
      "text": "",
      "lang": ""
    },
    {
      "type": "",
      "text": "",
      "lang": ""
    }
  ]
}
